Q: Why are there missing keys with 2 threads, but not with 1 thread? 
Identify a sequence of events with 2 threads that can lead to a key being missing.
Submit your sequence with a short explanation in answers-thread.txt
A: 这里的哈希表就是"数组(bucket)+链表"的经典实现方法. 
通过取余确定bucket, put()是使用前插法插入键值对,get()遍历bucket下的链表找到对应key的entry.
而这个实现没有涉及任何锁机制等线程安全机制, 因此线程不安全, 多线程插入时会出现数据丢失.
该哈希表的线程安全问题是: 多个线程同时调用put()对同一个bucket进行数据插入时,可能会使得先插入的entry丢失.
具体来讲, 假设有A和B两个线程同时put(), 而恰好put()的参数key对应到了哈希表的同一bucket.
同时假设A和B都运行到put()函数的insert()处, 还未进入该函数内部, 这就会导致两个线程insert()
的后两个参数是相同的, 都是当前bucket的链表头, 如若线程A调用insert()插入完entry后,切换到线程
B再调用insert()插入entry,则会导致线程A刚刚插入的entry丢失.
